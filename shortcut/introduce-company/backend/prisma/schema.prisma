// This file is generated by FUSEBLE.inc CLI

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// _enum.prisma

enum NoticeType {
  INFO
  PRIMARY
}

// _enum.prisma

enum UserSocialProvider {
  KAKAO
  NAVER
  GOOGLE
  FACEBOOK
  GITHUB
  APPLE
}

enum UserRole {
  ADMIN
  USER
}
// contact.prisma

model Contact {
  id          String  @id @default(cuid())
  name        String?
  email       String?
  phoneNumber String?
  content     String? @db.Text

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// faq.prisma

model FAQ {
  id      String  @id @default(cuid())
  title   String
  content String? @db.Text

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  FAQComment FAQComment[]
}

model FAQComment {
  id      String @id @default(cuid())
  content String @db.Text

  faqId  String
  faq    FAQ    @relation(fields: [faqId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  parentId String?
  parent   FAQComment?  @relation("commentToComment", fields: [parentId], references: [id])
  children FAQComment[] @relation("commentToComment")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// notice.prisma

model Notice {
  id          String     @id @default(cuid())
  seq         Int        @default(autoincrement())
  title       String
  description String?    @db.VarChar(255)
  type        NoticeType @default(INFO)
  content     String     @db.Text
  published   Boolean    @default(false)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)

  comments NoticeComment[]

  @@unique([seq])
}

model NoticeComment {
  id      String @id @default(cuid())
  content String @db.Text

  noticeId String
  notice   Notice @relation(fields: [noticeId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  parentId String?
  parent   NoticeComment?  @relation("commentToComment", fields: [parentId], references: [id])
  children NoticeComment[] @relation("commentToComment")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// category.prisma

model PostCategory {
  id   String @id @default(cuid())
  seq  Int?   @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId String?
  parent   PostCategory?  @relation("categoryToCategory", fields: [parentId], references: [id])
  children PostCategory[] @relation("categoryToCategory")

  posts Post[]

  @@unique([seq])
}

// post.prisma

model Post {
  id           String  @id @default(cuid())
  title        String
  content      String? @db.Text
  thumbnailUrl String? @db.VarChar(255)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  categoryId String?
  category   PostCategory? @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

// social.prisma

model UserSocial {
  id         String             @id @default(cuid())
  provider   UserSocialProvider
  providerId String
  userId     String
  user       User               @relation(fields: [userId], references: [id])
  createdAt  DateTime           @default(now())
}

// user.prisma

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  nickname String   @unique
  password String?
  role     UserRole @default(USER)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  socials       UserSocial[]
  notices       Notice[]
  posts         Post[]
  Contact       Contact[]
  FAQComment    FAQComment[]
  NoticeComment NoticeComment[]
}
// _relation.prisma
